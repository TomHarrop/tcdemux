---
name: docker-sif-deploy

on:
  push:
    branches:
      - "main"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Clean up root dir
        run: |
          df -h
          rm -rf /usr/share/dotnet/
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          df -h
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Get Latest Tag
        run: |
            # Get the latest tag, we won't build if it's the current
            git fetch --tags
            latest_tag=$(git tag | tail -1)
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - name: Define Repository Name and Release Version
        run: |
            repo=$(echo "${GITHUB_REPOSITORY/\//-}")
            release=$(cat VERSION)
            echo "reponame=$repo" >> $GITHUB_ENV
            echo "release_tag=$release" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        if: ${{ env.release_tag != env.latest_tag }}
        run: |
          gh release create ${{ env.release_tag }} \
            --title ${{ env.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Dockerfile image tag
        run: |
          owner=${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}
          repo=${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}
          echo "owner is $owner"
          echo "repo is $repo."
          recipe=$(ls Dockerfile*)
          echo "Building $recipe"
          tag=$(echo "${recipe/Dockerfile\./}")
          # If we find empty, use the release tag
          if [ "$tag" == "Dockerfile" ]; then
              tag=${{ env.release_tag }}
          fi
          # Build the container and name by tag
          echo "Tag is $tag."
          echo "recipe=$recipe" >> $GITHUB_ENV
          echo "owner=$owner" >> $GITHUB_ENV
          echo "reponame=$repo" >> $GITHUB_ENV
          echo "image_tag=$tag" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          file: ${{ env.recipe }}
          tags: |
            ghcr.io/${{ env.owner }}/${{ env.reponame }}:${{ env.image_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
